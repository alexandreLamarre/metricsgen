// Package {{ .PackageName }} is auto-generated by metricsgen. DO NOT EDIT.
package {{ .PackageName }}

import (
  {{- range $_, $dependency := .ImportDefs}}
  {{- if ne $dependency.Alias "" }}
  {{ $dependency.Alias }} "{{ $dependency.Dependency }}"
  {{- else }}
  "{{ $dependency.Dependency }}"
  {{- end }}
  {{- end }}
)

{{- range $enum := .EnumTypes }}
type {{ $enum.EnumType }} {{ $enum.ValueType }}

func (e {{ $enum.EnumType }}) Val() {{ $enum.ValueType }} {
  return {{ $enum.ValueType }}(e)
}

const (
  {{- range $valueDef := .Values }}
  Enum{{ $valueDef.ValueCase }} {{$enum.EnumType}}  = {{ $valueDef.Value }}
  {{- end }}
)
{{- end }}

type Metrics struct {
  {{- range $metricStructName, $_ := .Metrics }}
  *Metric{{ $metricStructName }}
  {{- end }}
}

//NewMetrics initializes the set of following metrics
{{- range $metricStructName, $def := .Metrics }}
//- {{$metricStructName}} {{ if ne $def.Description ""}} : {{$def.Description}} {{end}}
{{- end }}
func NewMetrics(meter otelmetricsdk.Meter) (Metrics, error) {
  m := Metrics{
  {{- range $metricStructName, $_ := .Metrics }}
    Metric{{$metricStructName}} : &Metric{{ $metricStructName }}{},
  {{- end }}
  }
  {{- range $metricStructName, $_ := .Metrics}}
  if err := m.Metric{{$metricStructName}}.init(meter); err != nil {
    return m, err
  }
  {{- end}}
  return m, nil
}
{{ range $metricStructName, $def := .Metrics }}
//Metric{{ $metricStructName }} {{ $def.Description }}
type Metric{{ $metricStructName }} struct{
    data  otelmetricsdk.{{ $def.ValueType }}{{ $def.MetricType }}
}

func (m *Metric{{ $metricStructName }}) init(meter otelmetricsdk.Meter) error {
  var err error 
  m.data, err = meter.{{ $def.ValueType}}{{ $def.MetricType }}(
    "{{$def.Name}}",
    {{- if ne $def.Description ""}}
    otelmetricsdk.WithDescription("{{$def.Description}}"),
    {{- end}}
    {{- if ne $def.Units ""}}
    otelmetricsdk.WithUnit("{{$def.Units}}"),
    {{- end }}
    {{- if ne (len $def.Buckets) 0 }}
    otelmetricsdk.WithExplicitBucketBoundaries({{- range $i, $v := $def.Buckets }}{{ if $i }}, {{ end }}{{ $v }}{{- end }}),
    {{- end }}
  )
  return err
}

//Record records a data point for the specified metric
{{- range $def.RequiredAttributes }}
{{- if .Description}}
//- {{ .Field }} : {{ .Description }}
{{- end }}
{{- end }}
func (m *Metric{{ $metricStructName }}) Record(
  ctx context.Context, 
  value {{ $def.Value}},
  {{- range $def.RequiredAttributes }}
  {{ .Field }} {{ .ValueType }},
  {{- end}} 
  attributeOpts ...Attribute{{$metricStructName}}Option,
) {
  options := &Attribute{{$metricStructName}}Options{}
  options.Apply(attributeOpts...)
  optionalAttr := options.Attributes()
  requiredAttrs := []otelattribute.KeyValue{
    {{- range $def.RequiredAttributes }}
      {{- if .Enum }}
    otelattribute.{{ .Constructor}}("{{ .Name}}", {{ .Field}}.Val()),
      {{- else }}
    otelattribute.{{ .Constructor}}("{{ .Name}}", {{ .Field}}),
      {{- end }}
    {{- end }}
  }

  attrs := otelattribute.NewSet(
    append(requiredAttrs, optionalAttr...)...,
  )

  {{- if eq $def.MetricType "Counter"}}
  m.data.Add(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
  {{- else}}
  m.data.Record(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
  {{- end }}
}

type Attribute{{$metricStructName}}Options struct {
  {{- range $def.OptionalAttributes }}
  {{ .Field }} *{{ .ValueType }}
  {{- end }}
}

type Attribute{{$metricStructName}}Option func(*Attribute{{$metricStructName}}Options)

func (o *Attribute{{$metricStructName}}Options) Apply(opts ...Attribute{{$metricStructName}}Option) {
  for _, opt := range opts {
    opt(o)
  }
}

func (o *Attribute{{$metricStructName}}Options) Attributes() []otelattribute.KeyValue {
  ret := []otelattribute.KeyValue{}
  {{- range $def.OptionalAttributes }}
  if o.{{ .Field }} != nil {
    {{- if .Enum }}
    ret = append(ret, otelattribute.{{ .Constructor }}("{{ .Name }}", (*o.{{.Field}}).Val()))
    {{- else }}
    ret = append(ret, otelattribute.{{ .Constructor }}("{{ .Name }}", *o.{{.Field}}))
    {{- end }}
  }
  {{- end }}
  return ret
}
{{ range $def.OptionalAttributes}}
{{- if ne $def.Description ""}}
//With{{$metricStructName}}{{.CamelCase}} sets the optional {{ .Name }} attribute
//corresponding to {{.Description}}
{{- end }}
func With{{$metricStructName}}{{.CamelCase}}({{.Field}} {{ .ValueType }}) Attribute{{$metricStructName}}Option {
  return func(o *Attribute{{$metricStructName}}Options) {
    val := &{{.Field}}
    o.{{.Field}} = val
  }
}
{{- end }}
{{ end }}