package metricsgen

import (
	"fmt"
	"os"
	"strings"
)

const (
	AliasOtelDriver = "otelmetricsdk"
)

func (a Attribute) Markdown() string {
	var requiredStr string
	if a.Required {
		requiredStr = " ✅ "
	} else {
		requiredStr = " ❌ "
	}
	return requiredStr
}

func (m Metric) Markdown(attrs map[string]Attribute) string {
	sb := strings.Builder{}
	header := fmt.Sprintf("## %s\n\n", m.Name)
	sb.WriteString(header)
	description := fmt.Sprintf(
		"%s\n\n", m.Short,
	)
	sb.WriteString(description)
	if m.Long != "" {
		description := fmt.Sprintf("%s\n\n", m.Long)
		sb.WriteString(description)
	}
	metricTableHeader := "| Unit | Metric Type | ValueType |\n| ---- | ------------ | --------- |\n"
	sb.WriteString(metricTableHeader)
	metricTable := fmt.Sprintf("| %s | %s | %s |\n", m.Unit, m.MetricTypeString(), m.ValueType)
	sb.WriteString(metricTable)
	if len(m.Attributes) > 0 {
		sb.WriteString("\n\n")
		sb.WriteString(attributeTableMd())
		for _, attr := range m.Attributes {
			if attribute, ok := attrs[attr]; ok {
				sb.WriteString(attribute.Markdown())
				sb.WriteString("\n")
			}
		}
	}

	return sb.String()
}

func (m Metric) MetricTypeString() string {
	if m.MetricTypeSum != nil {
		return "Sum"
	}
	if m.MetricTypeGauge != nil {
		return "Gauge"
	}
	if m.MetricTypeHist != nil {
		return "Histogram"
	}
	if m.MetricTypeExpHist != nil {
		return "Exponential Histogram"
	}
	panic("unknown metric type")
}

func (cfg *Config) Gen() error {
	if err := cfg.Validate(); err != nil {
		return err
	}

	if err := cfg.GenerateCode(); err != nil {
		return err
	}

	if err := cfg.generateDocs(); err != nil {
		return err
	}
	return nil
}

func (cfg *Config) GenerateCode() error {
	// get current package name
	packageName := "main"

	sb := strings.Builder{}

	header := fmt.Sprintf("// Package %s is auto-generated by metricsgen. DO NOT EDIT.\n", packageName)
	packageLine := fmt.Sprintf("package %s\n", packageName)

	i := NewImportWriter([]importDef{
		{
			alias:      AliasOtelDriver,
			dependency: "go.opentelemetry.io/otel/metric",
		},
		{
			dependency: "go.opentelemetry.io/otel/attribute",
		},
		{
			dependency: "context",
		},
	})

	sb.WriteString(header)
	sb.WriteString(packageLine)
	sb.WriteString("\n")
	sb.WriteString(i.Generate())
	sb.WriteString("\n")
	sb.WriteString(cfg.GenerateMetricInfo())
	sb.WriteString("\n")
	sb.WriteString(cfg.GenerateAllMetricsStruct())

	sb.WriteString("\n")
	sb.WriteString(cfg.GenerateAllMetricAttributesStruct())

	if err := os.WriteFile("metricsgen.go", []byte(sb.String()), 0644); err != nil {
		return err
	}
	return nil
}

func (cfg *Config) metricStructName(m Metric) string {
	return "Metric" + OtelStringToCamelCase(m.Name)
}

func (cfg *Config) GenerateMetricInfo() string {
	attrDef := []attributeDef{}

	for _, m := range cfg.Metrics {
		attrDef = append(
			attrDef,
			attributeDef{
				pointer:  true,
				attrType: cfg.metricStructName(m),
			},
		)
	}

	s := NewStructWriter(
		"MetricInfo",
		"",
		attrDef,
	)

	return s.Generate()
}

func (cfg *Config) generateMetricAttributesStruct(m Metric) string {
	sb := strings.Builder{}
	attrs := AttributesForMetric(m, cfg.Attributes)
	attrDef := []attributeDef{}

	for _, attr := range attrs {
		attrDef = append(attrDef, attributeDef{
			field:    OtelStringToCamelCase(attr.Name),
			attrType: "string",
			pointer:  false,
		})
	}
	s := NewStructWriter(
		cfg.metricAttributeStructName(m),
		"",
		attrDef,
	)

	structDef := s.Generate()
	structConstructor := cfg.generateMetricAttributesStructConstructor(m, attrs)
	sb.WriteString(structDef)
	sb.WriteString("\n")
	sb.WriteString(structConstructor)
	sb.WriteString("\n")
	return sb.String()
}

func (cfg *Config) generateMetricAttributesStructConstructor(
	m Metric, attrs []Attribute,
) string {
	sb := strings.Builder{}
	sb.WriteString(
		fmt.Sprintf("func New%s() %s {\n", cfg.metricAttributeStructName(m), cfg.metricAttributeStructName(m)),
	)

	sb.WriteString(
		fmt.Sprintf("\t return %s {\n", cfg.metricAttributeStructName(m)),
	)
	for _, attr := range attrs {
		sb.WriteString(fmt.Sprintf(
			"\t\t%s : \"%s\",", OtelStringToCamelCase(attr.Name), OtelStringToPromLabel(attr.Name),
		))
		sb.WriteString("\n")
	}
	sb.WriteString("\t}\n")

	sb.WriteString("}\n")
	return sb.String()
}

func (cfg *Config) metricAttributeStructName(m Metric) string {
	return cfg.metricStructName(m) + "Attributes"
}

func (cfg *Config) GenerateAllMetricAttributesStruct() string {
	got := ""
	for _, m := range cfg.Metrics {
		ret := cfg.generateMetricAttributesStruct(m)
		got += ret
	}
	return got
}

func (cfg *Config) observerField() string {
	return "data"
}

func otelTypeFromValueType(valueType string) string {
	if strings.HasPrefix(valueType, "int") {
		return "Int64"
	}
	if strings.HasPrefix(valueType, "float") {
		return "Float64"
	}
	panic(fmt.Sprintf("unknown value type : %s", valueType))
}

func (cfg *Config) getMetricType(m Metric) string {
	vType := otelTypeFromValueType(m.ValueType)
	if m.MetricTypeSum != nil {
		return vType + "Counter"
	}
	if m.MetricTypeGauge != nil {
		return vType + "Gauge"
	}
	if m.MetricTypeHist != nil {
		return vType + "Histogram"
	}
	if m.MetricTypeExpHist != nil {
		return vType + "Histogram"
	}
	panic("unknown metric type")
}

func (cfg *Config) getOtelDriverDataField(m Metric) attributeDef {
	return attributeDef{
		attrType: AliasOtelDriver + "." + cfg.getMetricType(m),
		field:    "data",
	}
}

func (cfg *Config) generateMetricStruct(m Metric) string {
	sb := strings.Builder{}
	attrs := []attributeDef{}
	attrs = append(attrs, cfg.getOtelDriverDataField(m))

	s := NewStructWriter(
		cfg.metricStructName(m),
		m.Short,
		attrs,
	)

	structDef := s.Generate()
	attributeMethod := cfg.generateMetricsAttributeMethod(m)
	initMethod := cfg.generateMetricInitMethod(m)
	sb.WriteString(structDef)
	sb.WriteString("\n")
	sb.WriteString(attributeMethod)
	sb.WriteString("\n")
	sb.WriteString(initMethod)
	sb.WriteString("\n")
	sb.WriteString(cfg.generateMetricRecordMethod(m))
	sb.WriteString("\n")
	return sb.String()
}

func (cfg *Config) generateMetricInitMethod(m Metric) string {
	sb := strings.Builder{}
	sb.WriteString(
		fmt.Sprintf("func (m *%s) init(meter %s.Meter) (err error) {\n", cfg.metricStructName(m), AliasOtelDriver),
	)
	sb.WriteString(fmt.Sprintf("\tm.data, err = meter.%s(\n", cfg.getMetricType(m)))
	sb.WriteString(fmt.Sprintf("\t\t\"%s\",\n", m.Name))
	if m.Short != "" {
		sb.WriteString(fmt.Sprintf("\t\t%s.WithDescription(\"%s\"),\n", AliasOtelDriver, m.Short))
	}
	if m.Unit != "" {
		sb.WriteString(fmt.Sprintf("\t\t%s.WithUnit(\"%s\"),\n", AliasOtelDriver, m.Unit))
	}
	sb.WriteString("\t)\n")
	sb.WriteString("\treturn err\n")
	sb.WriteString("}\n")
	return sb.String()
}

func (cfg *Config) generateMetricRecordMethod(m Metric) string {
	sb := strings.Builder{}
	vType := strings.ToLower(otelTypeFromValueType(m.ValueType))
	sb.WriteString(
		fmt.Sprintf("func (m %s) Record(ctx context.Context, value %s) {\n",
			cfg.metricStructName(m),
			vType,
		),
	)
	sb.WriteString("\tm.data.Record(ctx,value)\n")
	sb.WriteString("}\n")
	return sb.String()
}

func (cfg *Config) generateMetricsAttributeMethod(m Metric) string {
	sb := strings.Builder{}
	sb.WriteString(
		fmt.Sprintf("func (m *%s) Attributes() %s {\n",
			cfg.metricStructName(m),
			cfg.metricAttributeStructName(m),
		),
	)
	sb.WriteString("\t")
	sb.WriteString(fmt.Sprintf("return New%s()", cfg.metricAttributeStructName(m)))
	sb.WriteString("\n")
	sb.WriteString("}\n")
	return sb.String()
}

func (cfg *Config) GenerateAllMetricsStruct() string {
	got := ""
	for _, m := range cfg.Metrics {
		got += cfg.generateMetricStruct(m)
	}
	return got
}

func attributeTableMd() string {
	return "### Attributes\n\n" + "| Name | Description | Type | Required | Default Value |\n" +
		"|------|-------------|------| ------- | ---------------|\n"
}

func (cfg *Config) generateDocs() error {
	sb := strings.Builder{}
	header := "# Metrics\n\n"

	sb.WriteString(header)
	sb.WriteString(cfg.generateTOC())
	sb.WriteString("\n\n")
	for _, metric := range cfg.Metrics {
		sb.WriteString(metric.Markdown(cfg.Attributes))
		sb.WriteString("\n\n")
	}
	return os.WriteFile("metrics.md", []byte(sb.String()), 0644)
}

func (cfg *Config) generateTOC() string {
	sb := strings.Builder{}
	for _, metric := range cfg.Metrics {
		sb.WriteString(
			fmt.Sprintf(
				"- [%s](#%s) : %s\n",
				metric.Name, strings.ToLower(
					strings.ReplaceAll(
						strings.ReplaceAll(metric.Name, ".", ""),
						" ", "-"),
				),
				metric.Short,
			),
		)
	}
	return sb.String()
}
