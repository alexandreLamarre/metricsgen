// Package prometheus is auto-generated by metricsgen. DO NOT EDIT.
package prometheus

import (
	"fmt"
	promsdk "github.com/prometheus/client_golang/prometheus"
	"strings"
)

// toString is a helper to convert arbitrary values to string
func toString(values ...any) []string {
	if len(values) == 0 {
		return []string{}
	}
	ret := make([]string, len(values))
	for i, v := range values {
		st, ok := v.(string)
		if ok {
			ret[i] = st
			continue
		}
		it, ok := v.(int)
		if ok {
			ret[i] = fmt.Sprintf("%d", it)
			continue
		}
		it64, ok := v.(int64)
		if ok {
			ret[i] = fmt.Sprintf("%d", it64)
		}
		bt, ok := v.(bool)
		if ok {
			ret[i] = fmt.Sprintf("%t", bt)
			continue
		}
		ft, ok := v.(float64)
		if ok {
			ret[i] = fmt.Sprintf("%g", ft)
			continue
		}

		sSlice, ok := v.([]string)
		if ok {
			sb := strings.Builder{}
			sb.WriteString("[")
			for i, val := range sSlice {
				if i != 0 {
					sb.WriteString(",")
				}
				sb.WriteString("\"")
				sb.WriteString(val)
				sb.WriteString("\"")
			}
			sb.WriteString("]")
			ret[i] = sb.String()
			continue
		}

		iSlice, ok := v.([]int)
		if ok {
			sb := strings.Builder{}
			sb.WriteString("[")
			for i, val := range iSlice {
				if i != 0 {
					sb.WriteString(",")
				}
				sb.WriteString(fmt.Sprintf("%d", val))
			}
			sb.WriteString("]")
			ret[i] = sb.String()
			continue
		}

		i64Slice, ok := v.([]int64)
		if ok {
			sb := strings.Builder{}
			sb.WriteString("[")
			for i, val := range i64Slice {
				if i != 0 {
					sb.WriteString(",")
				}
				sb.WriteString(fmt.Sprintf("%d", val))
			}
			sb.WriteString("]")

			ret[i] = sb.String()
			continue
		}

		fSlice, ok := v.([]float64)
		if ok {
			sb := strings.Builder{}
			sb.WriteString("[")
			for i, val := range fSlice {
				if i != 0 {
					sb.WriteString(",")
				}
				sb.WriteString(fmt.Sprintf("%g", val))
			}
			sb.WriteString("]")
			ret[i] = sb.String()
			continue
		}

		bSlice, ok := v.([]bool)
		if ok {
			sb := strings.Builder{}
			sb.WriteString("[")
			for i, val := range bSlice {
				if i != 0 {
					sb.WriteString(" ")
				}
				sb.WriteString(fmt.Sprintf("%t", val))
			}
			sb.WriteString("]")
			ret[i] = sb.String()
			continue
		}

	}
	return ret
}

// EnumExampleEnum Example enum
type EnumExampleEnum string

func (e EnumExampleEnum) Val() string {
	return string(e)
}

const (
	EnumExampleEnumOn  EnumExampleEnum = "on"
	EnumExampleEnumOff EnumExampleEnum = "off"
)

// EnumExampleEnum2 Example enum 2
type EnumExampleEnum2 string

func (e EnumExampleEnum2) Val() string {
	return string(e)
}

const (
	EnumExampleEnum2On  EnumExampleEnum2 = "on"
	EnumExampleEnum2Off EnumExampleEnum2 = "off"
)

type PrometheusMetrics struct {
	*MetricExampleCounter
	*MetricExampleCounterOptional
	*MetricExampleGauge
	*MetricExampleGaugeOptional
	*MetricExampleHistogram
	*MetricExampleHistogramCustomized
	*MetricExampleHistogramOptional
}

// NewPrometheusMetrics initializes the set of following metrics
// - ExampleCounter  : Example Counter
// - ExampleCounterOptional  : Example Counter
// - ExampleGauge  : Example Gauge
// - ExampleGaugeOptional  : Example Gauge
// - ExampleHistogram  : Example Histogram
// - ExampleHistogramCustomized  : Example Exponential Histogram
// - ExampleHistogramOptional  : Example Histogram
func NewPrometheusMetrics(reg *promsdk.Registry) (PrometheusMetrics, error) {
	m := PrometheusMetrics{
		MetricExampleCounter:             &MetricExampleCounter{},
		MetricExampleCounterOptional:     &MetricExampleCounterOptional{},
		MetricExampleGauge:               &MetricExampleGauge{},
		MetricExampleGaugeOptional:       &MetricExampleGaugeOptional{},
		MetricExampleHistogram:           &MetricExampleHistogram{},
		MetricExampleHistogramCustomized: &MetricExampleHistogramCustomized{},
		MetricExampleHistogramOptional:   &MetricExampleHistogramOptional{},
	}
	if err := m.MetricExampleCounter.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleCounterOptional.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleGauge.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleGaugeOptional.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleHistogram.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleHistogramCustomized.init(reg); err != nil {
		return m, err
	}
	if err := m.MetricExampleHistogramOptional.init(reg); err != nil {
		return m, err
	}
	return m, nil
}

// MetricExampleCounter Example Counter
type MetricExampleCounter struct {
	Data *promsdk.CounterVec
}

func (m *MetricExampleCounter) init(reg *promsdk.Registry) error {
	data := promsdk.NewCounterVec(
		promsdk.CounterOpts{
			Name: "example_counter_total",
			Help: "Example Counter",
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice", "example_enum", "example_enum2",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleCounter) Add(
	value int64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	exampleEnum EnumExampleEnum,
	exampleEnum2 EnumExampleEnum2,
	attributeOpts ...AttributeExampleCounterOption,
) {
	options := &AttributeExampleCounterOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice, exampleEnum.Val(), exampleEnum2.Val(),
		), options.Labels()...)...,
	).Add(float64(value))
}

type AttributeExampleCounterOptions struct {
}

type AttributeExampleCounterOption func(*AttributeExampleCounterOptions)

func (o *AttributeExampleCounterOptions) Apply(opts ...AttributeExampleCounterOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleCounterOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}

// MetricExampleCounterOptional Example Counter
type MetricExampleCounterOptional struct {
	Data *promsdk.CounterVec
}

func (m *MetricExampleCounterOptional) init(reg *promsdk.Registry) error {
	data := promsdk.NewCounterVec(
		promsdk.CounterOpts{
			Name: "example_counter_optional_total",
			Help: "Example Counter",
		},
		[]string{

			// Optional attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleCounterOptional) Add(
	value int64,
	attributeOpts ...AttributeExampleCounterOptionalOption,
) {
	options := &AttributeExampleCounterOptionalOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(), options.Labels()...)...,
	).Add(float64(value))
}

type AttributeExampleCounterOptionalOptions struct {
	exampleString      *string
	exampleInt         *int
	exampleFloat       *float64
	exampleBool        *bool
	exampleInt64       *int64
	exampleFloatSlice  *[]float64
	exampleBoolSlice   *[]bool
	exampleIntSlice    *[]int
	exampleInt64Slice  *[]int64
	exampleStringSlice *[]string
}

type AttributeExampleCounterOptionalOption func(*AttributeExampleCounterOptionalOptions)

func (o *AttributeExampleCounterOptionalOptions) Apply(opts ...AttributeExampleCounterOptionalOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleCounterOptionalOptions) Labels() []string {
	ret := []any{}
	if o.exampleString != nil {
		ret = append(ret, *o.exampleString)
	}
	if o.exampleInt != nil {
		ret = append(ret, *o.exampleInt)
	}
	if o.exampleFloat != nil {
		ret = append(ret, *o.exampleFloat)
	}
	if o.exampleBool != nil {
		ret = append(ret, *o.exampleBool)
	}
	if o.exampleInt64 != nil {
		ret = append(ret, *o.exampleInt64)
	}
	if o.exampleFloatSlice != nil {
		ret = append(ret, *o.exampleFloatSlice)
	}
	if o.exampleBoolSlice != nil {
		ret = append(ret, *o.exampleBoolSlice)
	}
	if o.exampleIntSlice != nil {
		ret = append(ret, *o.exampleIntSlice)
	}
	if o.exampleInt64Slice != nil {
		ret = append(ret, *o.exampleInt64Slice)
	}
	if o.exampleStringSlice != nil {
		ret = append(ret, *o.exampleStringSlice)
	}
	return toString(ret...)
}

// WithExampleCounterOptionalExampleString sets the optional example_string attribute
// corresponding to Example string value
func WithExampleCounterOptionalExampleString(exampleString string) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleString
		o.exampleString = val
	}
}

// WithExampleCounterOptionalExampleInt sets the optional example_int attribute
// corresponding to Example int value
func WithExampleCounterOptionalExampleInt(exampleInt int) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleInt
		o.exampleInt = val
	}
}

// WithExampleCounterOptionalExampleFloat sets the optional example_float attribute
// corresponding to Example float value
func WithExampleCounterOptionalExampleFloat(exampleFloat float64) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleFloat
		o.exampleFloat = val
	}
}

// WithExampleCounterOptionalExampleBool sets the optional example_bool attribute
// corresponding to Example boolean value
func WithExampleCounterOptionalExampleBool(exampleBool bool) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleBool
		o.exampleBool = val
	}
}

// WithExampleCounterOptionalExampleInt64 sets the optional example_int64 attribute
// corresponding to Example int64 value
func WithExampleCounterOptionalExampleInt64(exampleInt64 int64) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleInt64
		o.exampleInt64 = val
	}
}

// WithExampleCounterOptionalExampleFloatSlice sets the optional example_floatSlice attribute
// corresponding to Example float slice value
func WithExampleCounterOptionalExampleFloatSlice(exampleFloatSlice []float64) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleFloatSlice
		o.exampleFloatSlice = val
	}
}

// WithExampleCounterOptionalExampleBoolSlice sets the optional example_boolSlice attribute
// corresponding to Example bool slice value
func WithExampleCounterOptionalExampleBoolSlice(exampleBoolSlice []bool) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleBoolSlice
		o.exampleBoolSlice = val
	}
}

// WithExampleCounterOptionalExampleIntSlice sets the optional example_intSlice attribute
// corresponding to Example int slice value
func WithExampleCounterOptionalExampleIntSlice(exampleIntSlice []int) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleIntSlice
		o.exampleIntSlice = val
	}
}

// WithExampleCounterOptionalExampleInt64Slice sets the optional example_int64Slice attribute
// corresponding to Example int64 slice value
func WithExampleCounterOptionalExampleInt64Slice(exampleInt64Slice []int64) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleInt64Slice
		o.exampleInt64Slice = val
	}
}

// WithExampleCounterOptionalExampleStringSlice sets the optional example_stringSlice attribute
// corresponding to Example int slice value
func WithExampleCounterOptionalExampleStringSlice(exampleStringSlice []string) AttributeExampleCounterOptionalOption {
	return func(o *AttributeExampleCounterOptionalOptions) {
		val := &exampleStringSlice
		o.exampleStringSlice = val
	}
}

// MetricExampleGauge Example Gauge
type MetricExampleGauge struct {
	Data *promsdk.GaugeVec
}

func (m *MetricExampleGauge) init(reg *promsdk.Registry) error {
	data := promsdk.NewGaugeVec(
		promsdk.GaugeOpts{
			Name: "example_gauge",
			Help: "Example Gauge",
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleGauge) Add(
	value float64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	attributeOpts ...AttributeExampleGaugeOption,
) {
	options := &AttributeExampleGaugeOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice,
		), options.Labels()...)...,
	).Add(float64(value))
}

type AttributeExampleGaugeOptions struct {
}

type AttributeExampleGaugeOption func(*AttributeExampleGaugeOptions)

func (o *AttributeExampleGaugeOptions) Apply(opts ...AttributeExampleGaugeOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleGaugeOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}

// MetricExampleGaugeOptional Example Gauge
type MetricExampleGaugeOptional struct {
	Data *promsdk.GaugeVec
}

func (m *MetricExampleGaugeOptional) init(reg *promsdk.Registry) error {
	data := promsdk.NewGaugeVec(
		promsdk.GaugeOpts{
			Name: "example_gauge_optional",
			Help: "Example Gauge",
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleGaugeOptional) Add(
	value float64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	attributeOpts ...AttributeExampleGaugeOptionalOption,
) {
	options := &AttributeExampleGaugeOptionalOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice,
		), options.Labels()...)...,
	).Add(float64(value))
}

type AttributeExampleGaugeOptionalOptions struct {
}

type AttributeExampleGaugeOptionalOption func(*AttributeExampleGaugeOptionalOptions)

func (o *AttributeExampleGaugeOptionalOptions) Apply(opts ...AttributeExampleGaugeOptionalOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleGaugeOptionalOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}

// MetricExampleHistogram Example Histogram
type MetricExampleHistogram struct {
	Data *promsdk.HistogramVec
}

func (m *MetricExampleHistogram) init(reg *promsdk.Registry) error {
	data := promsdk.NewHistogramVec(
		promsdk.HistogramOpts{
			Name: "example_histogram",
			Help: "Example Histogram",
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleHistogram) Observe(
	value float64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	attributeOpts ...AttributeExampleHistogramOption,
) {
	options := &AttributeExampleHistogramOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice,
		), options.Labels()...)...,
	).Observe(float64(value))
}

type AttributeExampleHistogramOptions struct {
}

type AttributeExampleHistogramOption func(*AttributeExampleHistogramOptions)

func (o *AttributeExampleHistogramOptions) Apply(opts ...AttributeExampleHistogramOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleHistogramOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}

// MetricExampleHistogramCustomized Example Exponential Histogram
type MetricExampleHistogramCustomized struct {
	Data *promsdk.HistogramVec
}

func (m *MetricExampleHistogramCustomized) init(reg *promsdk.Registry) error {
	data := promsdk.NewHistogramVec(
		promsdk.HistogramOpts{
			Name: "example_histogram_customized",
			Help: "Example Exponential Histogram",
			Buckets: []float64{
				1, 2, 3, 4,
			},
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleHistogramCustomized) Observe(
	value float64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	attributeOpts ...AttributeExampleHistogramCustomizedOption,
) {
	options := &AttributeExampleHistogramCustomizedOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice,
		), options.Labels()...)...,
	).Observe(float64(value))
}

type AttributeExampleHistogramCustomizedOptions struct {
}

type AttributeExampleHistogramCustomizedOption func(*AttributeExampleHistogramCustomizedOptions)

func (o *AttributeExampleHistogramCustomizedOptions) Apply(opts ...AttributeExampleHistogramCustomizedOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleHistogramCustomizedOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}

// MetricExampleHistogramOptional Example Histogram
type MetricExampleHistogramOptional struct {
	Data *promsdk.HistogramVec
}

func (m *MetricExampleHistogramOptional) init(reg *promsdk.Registry) error {
	data := promsdk.NewHistogramVec(
		promsdk.HistogramOpts{
			Name: "example_histogram_optional_milliseconds",
			Help: "Example Histogram",
		},
		[]string{
			// Required attributes
			"example_string", "example_int", "example_float", "example_bool", "example_int64", "example_floatSlice", "example_boolSlice", "example_intSlice", "example_int64Slice", "example_stringSlice",
		},
	)
	if err := reg.Register(data); err != nil {
		return err
	}
	m.Data = data
	return nil
}

func (m *MetricExampleHistogramOptional) Observe(
	value float64,
	exampleString string,
	exampleInt int,
	exampleFloat float64,
	exampleBool bool,
	exampleInt64 int64,
	exampleFloatSlice []float64,
	exampleBoolSlice []bool,
	exampleIntSlice []int,
	exampleInt64Slice []int64,
	exampleStringSlice []string,
	attributeOpts ...AttributeExampleHistogramOptionalOption,
) {
	options := &AttributeExampleHistogramOptionalOptions{}
	options.Apply(attributeOpts...)
	m.Data.WithLabelValues(
		append(toString(
			exampleString, exampleInt, exampleFloat, exampleBool, exampleInt64, exampleFloatSlice, exampleBoolSlice, exampleIntSlice, exampleInt64Slice, exampleStringSlice,
		), options.Labels()...)...,
	).Observe(float64(value))
}

type AttributeExampleHistogramOptionalOptions struct {
}

type AttributeExampleHistogramOptionalOption func(*AttributeExampleHistogramOptionalOptions)

func (o *AttributeExampleHistogramOptionalOptions) Apply(opts ...AttributeExampleHistogramOptionalOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeExampleHistogramOptionalOptions) Labels() []string {
	ret := []any{}
	return toString(ret...)
}
